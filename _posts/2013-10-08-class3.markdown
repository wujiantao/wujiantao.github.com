---
title: c++类介绍三（静态成员和友元）
layout: post
key: e0a7ce86-0ed0-4277-887b-50354ac470f8
tags:
  -c++ 
---


####一.类中的静态成员####
c++类中的静态成员分为静态成员变量和静态成员函数。其为类所拥有，不为某一个对象所特有，所有对象对静态成员的修改，其他对象都可以看到。

#####1.可访问性#####

对于静态成员函数，如果属性为public，那么类和对象都可以访问该静态成员函数，但推荐用类名去访问。 对于静态成员变量，首先类中的所有成员函数（包括静态和非静态）都可以访问，同时如果属性为public，在类外面也可以通过类名或变量名进行访问，但推荐用类名访问。

注意静态成员函数中不能访问类中的非静态变量。

#####2.静态成员的定义和使用#####

通常类的声明和定义是分离的，假设我们在头文件中声明了一个类，并且在类中声明了静态成员。那么在类的定义中，如果要用到类中的静态成员，需要先进行声明。如下所示

头文件中的声明

	class A
	{
		private:
			static int v;
		public:
			static void print();
	};

源文件中的定义

	int A::v;//调用前需要进行声明
	void A::print()
	{
		printf("%d\n", v);
	}
	int main()
	{
		A::print();
	}

####二、友元####

友元分为友元类和友元函数，其实现的功能比较类似，就是通过friend关键字将某个函数或者某个类设置为当前类类 C 的友元之后，那么在该友元函数或者友元类中就可以通过类 C 的对象去访问其私有成员（通常类的对象是不允许访问其的私有成员的，但在友元中却可以）。如下所示

	class A
	{
		private:
			int v;
			friend class B;
			friend void print (A &a);
			//将类 B 设置为友元, 这样 B 中的所有成员函数都是类 A 的友元函数。
			//将 print 函数设置为友元函数，则在 print中可以借助形参 a 访问 a 的私有变量。
	};

	class B 
	{
		private:
			A a;
		public:
			void show() { printf("%d\n", a.v);}
	};

	void print (B& b)
	{
		printf("%d\n", b.v);
	}

