---
title: vim中正则表达式介绍
layout: post
key: 0c8727a8-48d4-4750-b8ff-29c4508e3a8c
tags:
  -vim
---


最近几天在网上搭了个个人博客。用markdown写博客的时候发现经常要写各种表达式。但表达式在处理上有时候不能和普通的文本一样。需要作特殊处理。以便看起来突出、协调、整齐或者美观。 比如有时可能需要对表达式作如下处理

> 1.	> 1	 用\*为表达式添加一个强调标签。
> 2.	> 2	 用\`为表达式添加一个代码标签。
> 3.	> 3	 为表达式与文本之间添加间距。
> 4.	> 4	 为运算符左右添加空格等等。

<div class="blank"></div>
###一、元字符介绍###
<div class="blank"></div>

####1、匹配字符的元字符####

<div class="blank"></div>

> 1.	> .     匹配任意字符
> 2.	> [abc]    匹配方括号中的任意一个字符，可用-表示字符范围。如[a-z0-9]匹配小写字母和数字
> 3.	> [^abc]    匹配除方括号中字符之外的任意字符
> 4.	> \d    匹配阿拉伯数字，等同于[0-9]
> 5.	> \D    匹配阿拉伯数字之外的任意字符，等同于[^0-9]
> 6.	> \x    匹配十六进制数字，等同于[0-9A-Fa-f]
> 7.	> \X    匹配十六进制数字之外的任意字符，等同于[^0-9A-Fa-f]
> 8.	> \l    匹配[a-z]
> 9.	> \L    匹配[^a-z]
> 10.	> \u    匹配[A-Z]
> 11.	> \U    匹配[^A-Z]
> 12.	> \w    匹配单词字母，等同于[0-9A-Za-z_]
> 13.	> \W    匹配单词字母之外的任意字符，等同于[^0-9A-Za-z_]
> 14.	> \t    匹配<TAB>字符
> 15.	> \s    匹配空白字符，等同于[\t]
> 16.	> \S    匹配非空白字符，等同于[^\t]

<div class="blank"></div>

####2、表示数量的元字符####

<div class="blank"></div>

> 1. > \*	 匹配0-任意个
> 3. > \\\+	 匹配1-任意个
> 4. > \\?	 匹配0-1个
> 5. > \\\{n,m\}   匹配n-m个
> 6. > \\\{n\}	 匹配n个
> 7. > \\\{n,\}	 匹配n-任意个
> 8. > \\\{,m\}	 匹配0-m个

<div class="blank"></div>

####3、表示位置的元字符####

<div class="blank"></div>

> 1. > $	 匹配行首
> 2. > ^	 匹配行尾
> 3. > \\<	 匹配单词词首
> 4. > \\>	 匹配单词词尾

<div class="blank"></div>

###二、正则表达式介绍###

下面简要根据开篇介绍的几条要求写一个正则表达式的查找和替换函数。具体的功能可以根据自己的需要进行修改。主要目的是介绍一下vim的正则表达式匹配。由于自身也是小白用户。也在写博客的同时进行学习。

		function! Regular_expr()
			""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
			"我们假设表达式之间是没有空格的，这个很好做到，直接拿正则表达式预先清除空格
			"匹配结束之后我们再对表达式中需要补充空格和调整间距的地方添加相应的空格
			
			"首先是原始表达式的匹配,含标示符或者常量如abc 9000（字符串作特殊考虑）
			"let pat = '\<[A-Za-z]\w*\>\|\<\d\+\>' 考虑到括号的问题。后面vim无法解析。
			"let pat = '\('.pat.'\)'				放松条件直接拿\w匹配。注释为正确写法
			let pat = '\w\+'

			"表达式中可能有对数组的引用，如a[e][f][g] 下面式子的意思是pat = "pat([pat])*
			let pat = pat.'\(\['.pat.'\]\)*'
			let left = pat

			"然后表达式之间可以进行运算.下面式子的意思是pat = pat(op pat)*
			let pat = pat.'\([\*\/+-]'.pat.'\)*'

			"然后表达式可以有括号，应该实现的功能是 pat = pat | (pat),注意之前的括号都是带\(转义的。而这里是原生匹配
			"let pat = pat.'\|('.pat.')'  "正确的写法, 但正确的写法因为表达式括号过多,vim已经无法解析
			let pat = '(\?'.pat.')\?' "	放松条件了。可能导致括号数不匹配

			"带括号的表达式可以进行运算 要实现的是 pat = pat (op pat)*
			let pat = '\('.pat.'[\*\/+-]\?\)\+'		可能匹配到不合法的表达式
			"let pat = pat.'\([\*\/+-]'.pat.'\)*'  正确的写法，但括号过多vim已无法解析

			"可以引入关系表达式, 但表达式左边不能有运算符。只能是一个变量。这也不准确。但vim已经无法解析正确的表达式了。
			let relation = '\([<>=]\|[<>=]=\)'
			let pat = '\('.left.relation.'\)\?'.pat
			
			"引入字符串表达式
			let pat = pat.'\|\<\".*\"\>'

			"正则表达式书写完毕。不是很准确可能导致匹配到不合法的表达式, 但一般合法的表达式是能匹配到的
			let pat = '\('.pat.'\)'
			
			"具体的功能可以自己添加。\1为最外层括号包围的字符串，也即整个匹配到的字符串。可添加和替换。
			exec 's/'.pat.'/ \1 /g'
		endfunction


###结语###

以上是对vim正则表达式的简要讨论。还有很多不完善的地方。


###引用###

1. [Vim查找替换及正则表达式的使用](http://tanqisen.github.io/blog/2013/01/13/vim-search-replace-regex/)

2. [vim 正则表达式](http://www.cnblogs.com/penseur/archive/2011/02/25/1964522.html)
